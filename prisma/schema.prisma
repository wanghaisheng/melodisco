datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int       @id @default(autoincrement())
  uuid             String    @unique
  email            String    @unique
  created_at       DateTime? @db.Timestamptz
  nickname         String?
  avatar_url       String?
  locale           String?   @db.VarChar(50)
  signin_type      String?   @db.VarChar(50)
  signin_ip        String?
  signin_provider  String?   @db.VarChar(50)
  signin_openid    String?
}

model Song {
  id               Int       @id @default(autoincrement())
  uuid             String    @unique
  video_url        String?
  audio_url        String?
  image_url        String?
  image_large_url  String?
  llm_model        String?   @db.VarChar(50)
  tags             String?
  lyrics           String?   @db.Text
  description      String?   @db.Text
  duration         Float?
  type             String?   @db.VarChar(50)
  user_uuid        String?
  title            String?
  play_count       Int?
  upvote_count     Int?
  created_at       DateTime? @db.Timestamptz
  status           String?   @db.VarChar(50)
  is_public        Boolean?
  is_trending      Boolean?
  provider         String?   @db.VarChar(50)
  artist           String?   @db.VarChar(100)
  prompt           String?   @db.Text
  favorite_songs   FavoriteSong[]
  play_songs       PlaySong[]
}

model FavoriteSong {
  song_uuid        String
  user_uuid        String
  created_at       DateTime? @db.Timestamptz
  updated_at       DateTime? @db.Timestamptz
  status           String?   @db.VarChar(50)
  song             Song      @relation(fields: [song_uuid], references: [uuid])

  @@unique([song_uuid, user_uuid], name: "unique_favorite_song")
}

model PlaySong {
  song_uuid        String   @id
  user_uuid        String
  created_at       DateTime? @db.Timestamptz
  song             Song      @relation(fields: [song_uuid], references: [uuid])
}

model UpvoteSong {
  song_uuid        String   @id
  user_uuid        String
  created_at       DateTime? @db.Timestamptz
  updated_at       DateTime? @db.Timestamptz
  is_signin        Boolean?
  status           String?   @db.VarChar(50)
}

model SongTask {
  uuid             String    @unique
  user_uuid        String
  created_at       DateTime? @db.Timestamptz
  updated_at       DateTime? @db.Timestamptz
  status           String?   @db.VarChar(50)
  description      String?   @db.Text
  title            String?
  lyrics           String?   @db.Text
  tags             String?
  is_no_lyrics     Boolean?
  lyrics_provider  String?   @db.VarChar(50)
  lyrics_uuid      String?   @db.VarChar(50)
  song_provider    String?   @db.VarChar(50)
  song_model       String?   @db.VarChar(50)
  song_uuids       String?   @db.Text
}

model Order {
  order_no         String    @unique
  created_at       DateTime? @db.Timestamptz
  user_uuid        String
  user_email       String
  amount           Int
  plan             String?   @db.VarChar(50)
  expired_at       DateTime? @db.Timestamptz
  order_status     Int       @db.SmallInt
  paied_at         DateTime? @db.Timestamptz
  stripe_session_id String?
  credits          Int
  currency         String?   @db.VarChar(50)
}