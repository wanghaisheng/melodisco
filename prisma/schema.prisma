datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String?
  emailVerified    DateTime?
  created_at       DateTime  @default(now())
  nickname         String?
  name             String?   // Added for Next-Auth compatibility
  image            String?   // Added for Next-Auth compatibility
  avatar_url       String?
  locale           String?
  signin_type      String?
  signin_ip        String?
  signin_provider  String?
  signin_openid    String?
  accounts         Account[]
  sessions         Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Your existing models

model songs {
  uuid             String   @id @default(uuid())
  video_url        String?
  audio_url        String?
  image_url        String?
  image_large_url  String?
  llm_model        String?
  tags             String?
  lyrics           String?
  description      String?
  duration         Float?
  type             String?
  user_uuid        String?
  title            String?
  play_count       Int?
  upvote_count     Int?
  created_at       DateTime @default(now())
  status           String?
  is_public        Boolean?
  is_trending      Boolean?
  provider         String?
  artist           String?
  prompt           String?
  favorite_songs favorite_songs[]
  play_songs     play_songs[]

}

model favorite_songs {
  song_uuid        String   @id @default(uuid())
  user_uuid        String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  status           String?
  song           songs    @relation(fields: [song_uuid], references: [uuid])

  @@unique([song_uuid, user_uuid], name: "unique_favorite_song")
}

model play_songs {
  id               String   @id @default(uuid())
  song_uuid        String
  user_uuid        String
  created_at       DateTime @default(now())
  song           songs    @relation(fields: [song_uuid], references: [uuid])
  @@index([song_uuid])

}

model upvote_songs {
  song_uuid        String   @id @default(uuid())
  user_uuid        String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  is_signin        Boolean?
  status           String?
}

model song_tasks {
  uuid             String   @id @default(uuid())
  user_uuid        String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  status           String?
  description      String?
  title            String?
  lyrics           String?
  tags             String?
  is_no_lyrics     Boolean?
  lyrics_provider  String?
  lyrics_uuid      String?
  song_provider    String?
  song_model       String?
  song_uuids       String?
}

model orders {
  order_no         String   @id @default(uuid())
  created_at       DateTime @default(now())
  user_uuid        String
  user_email       String
  amount           Int
  plan             String?
  expired_at       DateTime?
  order_status     Int
  paied_at         DateTime?
  stripe_session_id String?
  credits          Int
  currency         String?
}